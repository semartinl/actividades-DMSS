/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import componentes.Componente;
import componentes.ComponentesPackage;
import componentes.Conector;
import componentes.Root;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ComponentesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ComponentesPackage.COMPONENTE:
				sequence_Componente(context, (Componente) semanticObject); 
				return; 
			case ComponentesPackage.CONECTOR:
				sequence_Conector(context, (Conector) semanticObject); 
				return; 
			case ComponentesPackage.ROOT:
				sequence_Root(context, (Root) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Componente returns Componente
	 *
	 * Constraint:
	 *     Name=EString?
	 * </pre>
	 */
	protected void sequence_Componente(ISerializationContext context, Componente semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Conector returns Conector
	 *
	 * Constraint:
	 *     (nombre=EString origen=[Componente|EString] destino=[Componente|EString])
	 * </pre>
	 */
	protected void sequence_Conector(ISerializationContext context, Conector semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComponentesPackage.Literals.CONECTOR__NOMBRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComponentesPackage.Literals.CONECTOR__NOMBRE));
			if (transientValues.isValueTransient(semanticObject, ComponentesPackage.Literals.CONECTOR__ORIGEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComponentesPackage.Literals.CONECTOR__ORIGEN));
			if (transientValues.isValueTransient(semanticObject, ComponentesPackage.Literals.CONECTOR__DESTINO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComponentesPackage.Literals.CONECTOR__DESTINO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConectorAccess().getNombreEStringParserRuleCall_1_0(), semanticObject.getNombre());
		feeder.accept(grammarAccess.getConectorAccess().getOrigenComponenteEStringParserRuleCall_4_0_1(), semanticObject.eGet(ComponentesPackage.Literals.CONECTOR__ORIGEN, false));
		feeder.accept(grammarAccess.getConectorAccess().getDestinoComponenteEStringParserRuleCall_6_0_1(), semanticObject.eGet(ComponentesPackage.Literals.CONECTOR__DESTINO, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Root returns Root
	 *
	 * Constraint:
	 *     ((conectores+=Conector conectores+=Conector*)? (componentes+=Componente componentes+=Componente*)?)
	 * </pre>
	 */
	protected void sequence_Root(ISerializationContext context, Root semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
